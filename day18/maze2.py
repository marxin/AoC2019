#!/usr/bin/env python3

data = '''
#########
#b.A.@.a#
#########
'''

data = '''
########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################
'''

data = '''
########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################
'''

data = '''
#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################
'''

data3 = '''
########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################
'''

data = '''
#################################################################################
#m....#...#...#.....#...#...............#.#...#.....#...........................#
#.###.#.#.#.#.###.#.#.#.#####.#.#########.#.#.#.#.###.###.#.#############.#####.#
#...#...#...#...#.#b#.#.#...#.#........x#.#.#.#.#.....#...#.#.......#.....#...#.#
#.#.###########.#.#.#.#.#.#.###########.#.#.#.#.#######.#####.#####.#######.#.###
#.#.......#...#.U.#...#...#...........#.#.#.#...#.....#..........p#.........#...#
#.#######.#.#.#######################.#.#.#.#####.###.###########.#############.#
#...#...#.#.#.#...#.S...#...........#...#.#.#...#.#.#.....#....k#.....#.......#.#
###.#.#.#.#.#.#.#.#.###.#.###.#####L###.#.#.#.#.#.#.###N###.###.#######.#####.#.#
#...#.#...#.#.#.#...#.#.#...#.#.......#.#.#...#...#.....#...#.#.#.......#...#.#.#
#.###.#####.#.#.#####.#.###.#.#########.#.#########.#####.###.#.#.#######.#.#.#.#
#.#.#.#...#.#.#.#.T...#.....#.........#.#...#.....#...#.#...#.....#.......#.#...#
#.#.#.#.#.#.#.#.#.###.#############.#.#.###.#.#.#####.#.###.#######.#####.#.#####
#.#.#q#.#.H.#.#.#.#...#.....F.#...#.#...#...#.#.....#.#...#...#.#...#.#...#...#.#
#.#.#.###.###.#.###.#.#####.#.#.#.###.###.###.###.#.#.###.###.#.#.###.#.#####.#.#
#...#...#.#...#.#...#.....#.#.#.#...#...#.#...#.#.#.#.#...#...#.......#.#.#...#.#
#######.#.#.###.#.#######.###.#.###.###.#.#.###.#.###.#.###.###########.#.#.###.#
#...J...#.#y....#.W.#...#.....#.#...#.#.#.#.....#.....#.#...#...........#.#.....#
#.#######.#########.#.#.#.#####.#.###.#.#.#####.#######.#.###.#.###.#####.#.#####
#.#...#...#.......#.#.#...#.....#.#.....#.......#.......#.#...#...#.#...#...#...#
#.#.#.#.#######.#V#.###.###.#####.#.#####.#########.#.#.#.#####.#.###.#Z#####.#.#
#.#v#.#.#.....#.#.#.#.#...#.#...#.#.....#.........#.#.#.#...#.#.#.....#.......#.#
#.###R#C#.###.#.#.#.#.#####.###.#.#####.#########.###.#.###.#.#################.#
#.#...#.#.#.#...#w#.#.....#...#...#...#.#.......#.....#...#...#.............#...#
#.#.###.#.#.#####.#.#####.###.#.###.#.#.#.#####.#########.#####.###########.#.#.#
#.#.#...#.#.........#...#.....#.#...#.#.#.A.#...........#...#...#..j......#.G.#.#
#.#.#.###.#.#######.###.#######.#.###.#####.#.#######.#####.#.###.#######.#####.#
#.#..r....#.#.....#.......#...#...#.#...#...#.#...#...#.....#.#...#.....#.......#
#.#######.###D###.#######.#.#.#####.###.#.###.#.#.#.###.#####.#.###.###.#########
#..z....#.#...#.#.....#t....#.#.......#.#...#.#i#.#...#.#.....#.#.....#.....#...#
#.#####.###.###.#####.#######.#######.#.#.#.###.#.#####.###O###.#####.#####.###.#
#.#...#...#.#.#.....#...#...#.......#.#.#.#.#...#.....#.#...#...#...#...#.......#
#.###.###.#.#.#.###.###.###.#.#####.#.#.###.#.#######.#.#.###.###.#.###.#######.#
#.....#.#.#.#.....#...#...#...#...#..f#.#...#.#.....#...#...#.....#...#...#...#.#
#####.#.#.#.#.#######.###.#####.#.#####.#.###.###.#.#######.#########.#.#.#.#.#.#
#...#.#.#...#...#.....#...#.....#.....#.#...#...#.#.#.......#...#.....#.#.#.#.#.#
#.#.#.#.#######.#.###.#.#.#.#########.#.#.#.###.#.#.#.#######.#.#.#######.#.#.#.#
#.#.#...#.....#.#.#...#.#.#.....#.#...#.#.#...#.#.#.#.#.....#.#...#.....#...#.#.#
#.#.###.###.#.###.#.###.#######.#.#.###.#.###.#.#.#.#.#.#####.#######.#.#####.#.#
#.#.........#.....#...#...........#....@#@..#.....#...#...............#.......#.#
#################################################################################
#.....#.........#.............#.#......@#@..........#.......#.......#.....#.....#
#.#.#.#.#######.#.###########.#.#.#.#####.###########.###.#.#.#####.#.###.#.###.#
#.#.#.#.#.....#.#.#.......#...#...#.#...#.......#...#.#.#.#.#.#...#.....#.#.#.#.#
#.#.#.#.#.###.#.#.###.#.###.###.###.#.#.#.#####.#.#.#.#.#.#.###.#.#######.#.#.#.#
#.#.#...#...#.#.#...#.#.#...#...#.#...#.#.#...#...#.....#.#.....#.......#.....#.#
###.#####.#.###.#.#.###.#.###.###.#####.#.#.#.###########.#############.#######.#
#...#.#...#.....#.#...#...#...#.......#.#...#.......#.....#.............#...#...#
#.###.#.#########.###.#.###.#########.#.###.#####.###.#########.#######.#.#.#.###
#.#.......#.....#...#.#.#.......#...#.#.#a..#...#.#...#.......#.#.....#d..#.#...#
#.#######.###.#.#.###.#.#######.#.#.#.#.#####.#.###.###.#####.#.#.###Y#####.#.#.#
#...#...#.....#.#.#...#.....I.#...#...#.#...#.#.....#...#.#...#.#.#...#...#.#.#.#
###.#.#.#######.###.#########.#########.#.#.#.#####.#.###.#.###.#.#.#####.#.###.#
#.#...#...#.........#.......#...........#.#.#.#.....#.#...#.#...#h#.#.....#.....#
#.#######.###########.#################.#.#.#.#######.#.#.#.#####.#.#.#########.#
#...#...#.....#...#.......#.......#.....#.#.#.....#...#.#.#.#.....#.#.#.......#.#
#.#.###.#####.#.#.#.#####.#.#.#####.#####.#.#####.#.###.#.#.#.#####.#.#.###.###.#
#.#.....#.#...#.#...#...#g#.#...#...#...#.#.#.....#.#...#.#.#.#...#.#.#...#.....#
#.#####.#.#.#########.#.#.#.###.#.###.#.#.#.#.###.#.#####.#.#.#.#.#.#.###.#######
#.#.....#.#...........#.#.#...#.#...#.#.#.#.#.#...#.....#.#.#.#.#.#.#...#...#...#
#.#.#####.#############.#.###.#.###.#.#.#.#.#.###.#####.#.#.#.#.###.#.#####.#.#.#
#.#...#.....#.#.....#...#...#.#o....#.#.#.#.#...#.#.....#.#.#c#...K.#.#.....#.#.#
#.###E#.###.#.#.###.#####.#.#.#########.#.#.###.#.#.#####.#.###.#####.#.#####.###
#.#...#...#.#.#...#...#...#...#.#.....#.#.#.....#.#.......#...#.....#.#.#...#...#
#.###.###.#.#.###.###.#.#######.#.#.#.#.#.#######.#######.#.#######.#.#.#.###.#.#
#...#.....#...#.#.#.#...#.....#...#.#...#.#.......#.....#.#...#.....#.#.#.....#.#
###.#.#######.#.#.#.#####.#.###.###.###.#.#.###########.#.###.#.#####.#.#######.#
#...#.#...#.....#.#..s#...#.....#...#.#.#.#.#.....#.....#.#.#...#.....#.....#...#
#.#.###.#.#####.#.###.#.#########.###.#.#.#.###.#.#.###.#.#.#####.#.#######.#.###
#.#.#...#.....#.#.#...#...#...#...#...#.#.#.....#...#...#...#...#.#.....#...#...#
#.###.#######.###.#.#.###.#.#.#.###.#.#.#.###########.#####.#.###.###M###.#####.#
#.#...#.....#.....#.#...#...#.#.#...#.#.#.#...........#.....#.....#.#...#.......#
#.#.#######.#######.#######.###.#.#.###.#.###########.#.#####.#####.###.#######.#
#.#.......#.#.....#...#.....#...#.#.#...#.......#...#.#.....#...#.....#.......#.#
#.#######.#.#.#.#.###.#.#####B###.###.###.#####.#.#.#######.###.#####.###.#####.#
#...#...#.#...#.#...#..l#...#...#...#.#.#.#...#.#.#.#.....#...#.#.....#...#...#.#
#.#.#.#.#.#.###.###.#.###.#.###.###.#P#.#.#.#Q#.#.#.#.###.###.#.#.###.#.###.#.#.#
#.#.#.#.#.#.#...#.#.#.#...#.....#...#...#...#.#.#.#.#...#...#.#...#...#...#.#...#
#.#.#.#.#.###.###.#.###.#########.#####.#####.#.#.#.###.###.#.#####.#####.#.#####
#.#...#.......#........u#.......X.......#.....#..n#.......#...#....e....#.......#
#################################################################################
'''

dataa = '''
#######
#a.#Cd#
##@#@##
#######
##@#@##
#cB#.b#
#######
'''

dataa = '''
###############
#d.ABC.#.....a#
######@#@######
###############
######@#@######
#b.....#.....c#
###############
'''

dataa = '''
#############
#g#f.D#..h#l#
#F###e#E###.#
#dCba@#@BcIJ#
#############
#nK.L@#@G...#
#M###N#H###.#
#o#m..#i#jk.#
#############
'''

maze = data.strip().split('\n')
width = len(maze[0])
height = len(maze)
me = None
moves = [(1, 0), (0, 1), (-1, 0), (0, -1)]

def get_pixel(x, y):
    return maze[y][x]

def set_pixel(x, y, value):
    maze[y] = maze[y][:x] + value + maze[y][x + 1:]

def get_positions():
    for y in range(height):
        for x in range(width):
            value = get_pixel(x,y)
            if value != '#' and value != '.':
                yield (value, (x, y))

def print_maze(steps, depth):
    #print('Steps: %d, depth: %d' % (steps, depth))
    for line in maze:
        print(line)
    print()

def flood_fill(keys):
    flood = {me: 0}
    queue = [me]
    reachable_keys = []
    while len(queue):
        pos = queue[0]
        queue = queue[1:]
        steps = flood[pos]
        for m in moves:
            newpos = (pos[0] + m[0], pos[1] + m[1])
            if newpos in flood:
                continue
            pixel = get_pixel(newpos[0], newpos[1])
            if pixel == '#':
                pass
            elif 'A' <= pixel and pixel <= 'Z':
                if pixel.lower() in keys:
                    reachable_keys.append((pixel, newpos, steps + 1))
                flood[newpos] = steps + 1
            else:
                if 'a' <= pixel and pixel <= 'z':
                    reachable_keys.append((pixel, newpos, steps + 1))
                elif pixel == '.' or pixel == '@':
                    pass
                else:
                    assert False
                queue.append(newpos)
                flood[newpos] = steps + 1
    return reachable_keys

def get_distances(start):
    flood = {start: (0, set())}    
    queue = [start]
    distances = {}
    while len(queue):
        pos = queue[0]
        queue = queue[1:]
        fl = flood[pos]
        for m in moves:
            newpos = (pos[0] + m[0], pos[1] + m[1])
            if newpos in flood:
                continue
            pixel = get_pixel(newpos[0], newpos[1])
            if pixel == '#':
                pass
            elif 'A' <= pixel and pixel <= 'Z':
                queue.append(newpos)
                copy = fl[1].copy()
                copy.add(pixel.lower())
                flood[newpos] = (fl[0] + 1, copy)
            else:
                if 'a' <= pixel and pixel <= 'z':
                    distances[pixel] = (fl[0] + 1, fl[1].copy())
                elif pixel == '.' or pixel == '@':
                    pass
                else:
                    assert False
                queue.append(newpos)
                flood[newpos] = (fl[0] + 1, fl[1].copy())
    return distances

distance_table = {}
at_distance_table = []
for k, v in get_positions():
    distances = get_distances(v)
    if k == '@':
        at_distance_table.append(distances)
    else:
        distance_table[k] = distances
print(distance_table)
print(at_distance_table)

all_keys = len(set([x for x in data if 'a' <= x and 'z']))

print_maze(0, 0)
calls = 0
cache_hits = 0
minimum = 2**50

def walk(letters, keys, steps, depth, cache):
    global distance_table, at_distance_table, calls, cache_hits, minimum, all_keys
    if len(keys) == all_keys + 1:
        return 0
    calls += 1
    key = (frozenset(keys), tuple(letters))
    if calls % (100 * 1000) == 0:
        print('Calls: %d, hits: %d (%.2f%%), cache size: %d, steps: %d' % (calls, cache_hits, 100.0 * cache_hits / calls, len(cache), steps))
        # print_maze(steps, depth)
    if key in cache:
        cache_hits += 1
        return cache[key]

    saved_letters = letters.copy()
    best = None
    for i in range(4):
        letter = letters[i]
        ff = None
        if letter == '@':
            ff = [x for x in at_distance_table[i].items() if x[0] not in keys and len(x[1][1] - keys) == 0]
        else:
            ff = [x for x in distance_table[letter].items() if x[0] not in keys and len(x[1][1] - keys) == 0]
        for f in ff:
            keys.add(f[0])
            letters[i] = f[0]
            subtime = walk(letters, keys, steps + f[1][0], depth + 1, cache)
            if best == None or subtime + f[1][0] < best:
                best = subtime + f[1][0]
            letters = saved_letters.copy()
            keys.remove(f[0])
    cache[key] = best
    return best

time = walk(['@', '@', '@', '@'], set(['@']), 0, 0, {})
print('Minimum: %d, calls: %d' % (time, calls))
